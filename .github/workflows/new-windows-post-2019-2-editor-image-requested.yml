name: New Windows Editor Version ðŸ—”

on:
  workflow_dispatch:
    inputs:
      jobId:
        description: 'Job ID'
        required: true
        default: 'editor-2023.2.0a9-1.0.1'
      editorVersion:
        description: 'Unity Editor Version'
        required: true
        default: '2023.2.0a9'
      changeSet:
        description: 'Unity Editor Changeset'
        required: true
        default: 'd3d5906d5d19'
      repoVersionFull:
        description: 'All digits of the latest tag of this repository, e.g. `1.23.45`'
        required: true
        default: '1.0.1'
      repoVersionMinor:
        description: 'Minor digit of that tag, e.g. `23`'
        required: true
        default: '1.0'
      repoVersionMajor:
        description: 'Major digit of that tag, e.g. `1`'
        required: true
        default: '1'

# Further reading:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#repository_dispatch
# https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#create-a-repository-dispatch-event
# https://developer.github.com/webhooks/event-payloads/#repository_dispatch

jobs:
  buildImage:
    name: "ðŸ›  Build chikacc/editor (${{ matrix.targetPlatform }})"
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - base
          - windows-il2cpp
          # - universal-windows-platform
          # - appletv
          # - lumin # TODO: Determine if we can build for lumin. Requires 3rd party SDK with several versions

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #################
      #   Variables   #
      #################
      - name: Show hook input
        run: |
          echo "Event ${{ github.event.event_type }}"
          echo "jobId: ${{ github.event.inputs.jobId }}"
          echo "Unity editor version: ${{ github.event.inputs.editorVersion }}"
          echo "Unity changeset: ${{ github.event.inputs.changeSet }}"
          echo "repoVersion (full): ${{ github.event.inputs.repoVersionFull }}"
          echo "repoVersion (only minor and major): ${{ github.event.inputs.repoVersionMinor }}"
          echo "repoVersion (only major): ${{ github.event.inputs.repoVersionMajor }}"

      #############
      #   Setup   #
      #############
      - name: Login to DockerHub
        env:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        run: docker login --username $Env:username --password $Env:password
      - name: Check if image does not already exist
        run: |
          # Source: https://gist.github.com/webbertakken/1789a4683a99e2a62b975ff436a85382
          function Docker-Tag-Exists {
            [CmdletBinding()]
            param([string] $Repository, [string] $Tag)

            Try {
              Invoke-RestMethod "https://index.docker.io/v1/repositories/$Repository/tags/$Tag"
            } Catch {} # Assume image does not exist on erroneous response

            return $?
          }

          if( (Docker-Tag-Exists -Repository chikacc/editor -Tag windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}) ) {
            echo "Image already exists. Exiting."
            exit 1
          }

      #######################
      #   Free disk space   #
      #######################
      # TODO: Determine what we can free on windows

      ############################
      #   Pull previous images   #
      ############################
      - name: Pull windows base image (must exist)
        run: docker pull unityci/base:windows-${{ github.event.inputs.repoVersionFull }}

      - name: Pull windows hub image (must exist)
        run: docker pull unityci/hub:windows-${{ github.event.inputs.repoVersionFull }}

      ############################
      #   Windows Editor image   #
      ############################
      - name: Build and Publish Windows Editor Image
        id: build_windows_editor_image
        continue-on-error: true
        run: |
          docker build ./images/windows/editor/ `
            --build-arg hubImage=unityci/hub:windows-${{ github.event.inputs.repoVersionFull }} `
            --build-arg baseImage=unityci/base:windows-${{ github.event.inputs.repoVersionFull }} `
            --build-arg version=${{ github.event.inputs.editorVersion }} `
            --build-arg changeSet=${{ github.event.inputs.changeSet }} `
            --build-arg module=${{ matrix.targetPlatform }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMinor }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMajor }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}

          ### Warning: If we once publish latest, we will have to do it forever. Lets not do that unless it's needed ###
          ### Another warning: order is important: We go from specific to unspecific with the exception of the most specific tag which is used to check if the image is already there ###

          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMinor }}
          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMajor }}
          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}

      #######################
      #   Retry the above   #
      #######################
      - name: Build and Publish Windows Editor Image (retry)
        if: steps.build_windows_editor_image.outcome=='failure'
        id: build_windows_editor_image_retry
        run: |
          docker build ./images/windows/editor/ `
            --build-arg hubImage=unityci/hub:windows-${{ github.event.inputs.repoVersionFull }} `
            --build-arg baseImage=unityci/base:windows-${{ github.event.inputs.repoVersionFull }} `
            --build-arg version=${{ github.event.inputs.editorVersion }} `
            --build-arg changeSet=${{ github.event.inputs.changeSet }} `
            --build-arg module=${{ matrix.targetPlatform }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMinor }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMajor }} `
            --tag chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}

          ### Warning: If we once publish latest, we will have to do it forever. Lets not do that unless it's needed ###
          ### Another warning: order is important: We go from specific to unspecific with the exception of the most specific tag which is used to check if the image is already there ###

          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMinor }}
          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionMajor }}
          docker push chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}

      ###########################
      #   Inspect publication   #
      ###########################
      - name: Inspect
        run: |
          docker inspect chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}

      - name: Image digest
        id: image-digest
        if: ${{ success() }}
        run: |
          $MetaData = docker inspect chikacc/editor:windows-${{ github.event.inputs.editorVersion }}-${{ matrix.targetPlatform }}-${{ github.event.inputs.repoVersionFull }}
          $ImageDetails = $MetaData | ConvertFrom-Json
          $Digest = $ImageDetails.Config.Image
          echo "digest=$Digest" >> $GITHUB_OUTPUT
          echo "metadata=$MetaData" >> $GITHUB_OUTPUT

      ###############
      #   Metrics   #
      ###############
      - name: Disk space after
        if: always()
        run: get-PSDrive
